{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = \"http://localhost:8080/api/auth\";\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    const token = localStorage.getItem(\"authToken\");\n    if (token && token !== \"undefined\" && token !== \"null\" && token !== \"\") {\n      this.getCurrentUser().subscribe({\n        error: () => {} // Ignore errors on startup\n      });\n    }\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      const token = response.data?.token;\n      const user = response.data?.user;\n      localStorage.setItem(\"authToken\", token);\n      this.currentUserSubject.next(user);\n    }));\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(tap(response => {\n      const token = response.data?.token;\n      const user = response.data?.user;\n      if (token) localStorage.setItem(\"authToken\", token);\n      if (user) this.currentUserSubject.next(user);\n    }));\n  }\n  forgotPassword(email) {\n    return this.http.post(`${this.apiUrl}/forgot-password`, {\n      email\n    });\n  }\n  logout() {\n    localStorage.removeItem(\"authToken\");\n    this.currentUserSubject.next(null);\n  }\n  getCurrentUser() {\n    return this.http.get(`${this.apiUrl}/me`);\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem(\"authToken\");\n  }\n  getToken() {\n    return localStorage.getItem(\"authToken\");\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","token","localStorage","getItem","getCurrentUser","subscribe","error","login","credentials","post","pipe","response","data","user","setItem","next","register","userData","forgotPassword","email","logout","removeItem","get","isAuthenticated","getToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\foulm\\Downloads\\v12\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\"\nimport { HttpClient } from \"@angular/common/http\"\nimport { type Observable, BehaviorSubject } from \"rxjs\"\nimport { tap } from \"rxjs/operators\"\n\nexport interface User {\n  id: number\n  username: string\n  email: string\n  firstName: string\n  lastName: string\n}\n\nexport interface LoginRequest {\n  username: string\n  password: string\n}\n\nexport interface RegisterRequest {\n  username: string\n  email: string\n  password: string\n  firstName: string\n  lastName: string\n}\n\nexport interface AuthResponse {\n  token: string\n  user: User\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthService {\n  private apiUrl = \"http://localhost:8080/api/auth\"\n  private currentUserSubject = new BehaviorSubject<User | null>(null)\n  public currentUser$ = this.currentUserSubject.asObservable()\n\n  constructor(private http: HttpClient) {\n    const token = localStorage.getItem(\"authToken\");\n    if (token && token !== \"undefined\" && token !== \"null\" && token !== \"\") {\n      this.getCurrentUser().subscribe({\n        error: () => {} // Ignore errors on startup\n      });\n    }\n  }\n\n  login(credentials: LoginRequest): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/login`, credentials).pipe(\n      tap((response) => {\n        const token = response.data?.token;\n        const user = response.data?.user;\n        localStorage.setItem(\"authToken\", token);\n        this.currentUserSubject.next(user);\n      }),\n    );\n  }\n\n  register(userData: RegisterRequest): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/register`, userData).pipe(\n      tap((response) => {\n        const token = response.data?.token;\n        const user = response.data?.user;\n        if (token) localStorage.setItem(\"authToken\", token);\n        if (user) this.currentUserSubject.next(user);\n      }),\n    );\n  }\n\n  forgotPassword(email: string): Observable<any> {\n    return this.http.post(`${this.apiUrl}/forgot-password`, { email })\n  }\n\n  logout(): void {\n    localStorage.removeItem(\"authToken\")\n    this.currentUserSubject.next(null)\n  }\n\n  getCurrentUser(): Observable<User> {\n    return this.http.get<User>(`${this.apiUrl}/me`)\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem(\"authToken\")\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(\"authToken\")\n  }\n}\n"],"mappings":"AAEA,SAA0BA,eAAe,QAAQ,MAAM;AACvD,SAASC,GAAG,QAAQ,gBAAgB;;;AA+BpC,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,gCAAgC;IACzC,KAAAC,kBAAkB,GAAG,IAAIN,eAAe,CAAc,IAAI,CAAC;IAC5D,KAAAO,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAG1D,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAIF,KAAK,IAAIA,KAAK,KAAK,WAAW,IAAIA,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,EAAE,EAAE;MACtE,IAAI,CAACG,cAAc,EAAE,CAACC,SAAS,CAAC;QAC9BC,KAAK,EAAEA,CAAA,KAAK,CAAE,CAAC,CAAC;OACjB,CAAC;;EAEN;EAEAC,KAAKA,CAACC,WAAyB;IAC7B,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAM,GAAG,IAAI,CAACZ,MAAM,QAAQ,EAAEW,WAAW,CAAC,CAACE,IAAI,CAClEjB,GAAG,CAAEkB,QAAQ,IAAI;MACf,MAAMV,KAAK,GAAGU,QAAQ,CAACC,IAAI,EAAEX,KAAK;MAClC,MAAMY,IAAI,GAAGF,QAAQ,CAACC,IAAI,EAAEC,IAAI;MAChCX,YAAY,CAACY,OAAO,CAAC,WAAW,EAAEb,KAAK,CAAC;MACxC,IAAI,CAACH,kBAAkB,CAACiB,IAAI,CAACF,IAAI,CAAC;IACpC,CAAC,CAAC,CACH;EACH;EAEAG,QAAQA,CAACC,QAAyB;IAChC,OAAO,IAAI,CAACrB,IAAI,CAACa,IAAI,CAAM,GAAG,IAAI,CAACZ,MAAM,WAAW,EAAEoB,QAAQ,CAAC,CAACP,IAAI,CAClEjB,GAAG,CAAEkB,QAAQ,IAAI;MACf,MAAMV,KAAK,GAAGU,QAAQ,CAACC,IAAI,EAAEX,KAAK;MAClC,MAAMY,IAAI,GAAGF,QAAQ,CAACC,IAAI,EAAEC,IAAI;MAChC,IAAIZ,KAAK,EAAEC,YAAY,CAACY,OAAO,CAAC,WAAW,EAAEb,KAAK,CAAC;MACnD,IAAIY,IAAI,EAAE,IAAI,CAACf,kBAAkB,CAACiB,IAAI,CAACF,IAAI,CAAC;IAC9C,CAAC,CAAC,CACH;EACH;EAEAK,cAAcA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACvB,IAAI,CAACa,IAAI,CAAC,GAAG,IAAI,CAACZ,MAAM,kBAAkB,EAAE;MAAEsB;IAAK,CAAE,CAAC;EACpE;EAEAC,MAAMA,CAAA;IACJlB,YAAY,CAACmB,UAAU,CAAC,WAAW,CAAC;IACpC,IAAI,CAACvB,kBAAkB,CAACiB,IAAI,CAAC,IAAI,CAAC;EACpC;EAEAX,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACR,IAAI,CAAC0B,GAAG,CAAO,GAAG,IAAI,CAACzB,MAAM,KAAK,CAAC;EACjD;EAEA0B,eAAeA,CAAA;IACb,OAAO,CAAC,CAACrB,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC5C;EAEAqB,QAAQA,CAAA;IACN,OAAOtB,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC1C;;;uBAvDWT,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXlC,WAAW;MAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}