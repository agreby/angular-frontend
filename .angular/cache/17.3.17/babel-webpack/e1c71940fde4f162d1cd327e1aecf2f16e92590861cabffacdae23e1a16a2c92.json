{"ast":null,"code":"import { of } from \"rxjs\";\nimport { delay } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nexport class CampaignService {\n  constructor() {\n    this.campaigns = [{\n      id: \"camp_1234567890\",\n      name: \"Monthly Newsletter - May 2023\",\n      subject: \"Your May Newsletter: Latest Updates and Offers\",\n      senderName: \"Good Mail Team\",\n      senderEmail: \"team@goodmail.io\",\n      replyToEmail: \"support@goodmail.io\",\n      campaignType: \"regular\",\n      template: \"newsletter\",\n      content: \"<h1>May Newsletter</h1><p>Here are our latest updates...</p>\",\n      recipientList: \"all_subscribers\",\n      segment: \"\",\n      status: \"sent\",\n      sentAt: \"2023-05-15T10:30:00Z\",\n      stats: {\n        sent: 5189,\n        delivered: 5120,\n        opened: 2150,\n        clicked: 843,\n        unsubscribed: 12,\n        bounced: 69,\n        links: [{\n          url: \"https://example.com/product/new\",\n          text: \"View New Products\",\n          clicks: 423,\n          uniqueClicks: 380\n        }, {\n          url: \"https://example.com/sale\",\n          text: \"Shop the Sale\",\n          clicks: 312,\n          uniqueClicks: 285\n        }, {\n          url: \"https://example.com/blog/tips\",\n          text: \"Read Our Latest Tips\",\n          clicks: 156,\n          uniqueClicks: 142\n        }, {\n          url: \"https://example.com/unsubscribe\",\n          text: \"Unsubscribe\",\n          clicks: 36,\n          uniqueClicks: 36\n        }],\n        recipients: this.generateRecipients(50)\n      }\n    }, {\n      id: \"camp_0987654321\",\n      name: \"Product Launch - New Summer Collection\",\n      subject: \"Introducing Our New Summer Collection! ðŸŒž\",\n      senderName: \"Good Mail Team\",\n      senderEmail: \"team@goodmail.io\",\n      replyToEmail: \"support@goodmail.io\",\n      campaignType: \"regular\",\n      template: \"product_announcement\",\n      content: \"<h1>Summer Collection</h1><p>Check out our new summer items...</p>\",\n      recipientList: \"all_subscribers\",\n      segment: \"\",\n      status: \"sent\",\n      sentAt: \"2023-06-01T09:00:00Z\",\n      stats: {\n        sent: 4950,\n        delivered: 4900,\n        opened: 2352,\n        clicked: 1176,\n        unsubscribed: 8,\n        bounced: 50,\n        links: [{\n          url: \"https://example.com/summer-collection\",\n          text: \"Shop Summer Collection\",\n          clicks: 876,\n          uniqueClicks: 780\n        }, {\n          url: \"https://example.com/sale/summer\",\n          text: \"Summer Sale Items\",\n          clicks: 342,\n          uniqueClicks: 310\n        }, {\n          url: \"https://example.com/blog/summer-trends\",\n          text: \"Summer Fashion Trends\",\n          clicks: 124,\n          uniqueClicks: 110\n        }, {\n          url: \"https://example.com/unsubscribe\",\n          text: \"Unsubscribe\",\n          clicks: 24,\n          uniqueClicks: 24\n        }],\n        recipients: this.generateRecipients(50)\n      }\n    }];\n  }\n  getCampaigns() {\n    return of(this.campaigns).pipe(delay(500));\n  }\n  getCampaignById(id) {\n    const campaign = this.campaigns.find(c => c.id === id) || this.campaigns[0];\n    return of(campaign).pipe(delay(500));\n  }\n  sendCampaign(campaign) {\n    // Simulate API call\n    const newCampaign = {\n      ...campaign,\n      id: this.generateId(),\n      status: \"sent\",\n      sentAt: new Date().toISOString(),\n      stats: {\n        sent: Math.floor(Math.random() * 5000) + 1000,\n        delivered: Math.floor(Math.random() * 4500) + 900,\n        opened: Math.floor(Math.random() * 2000) + 500,\n        clicked: Math.floor(Math.random() * 1000) + 100,\n        unsubscribed: Math.floor(Math.random() * 20),\n        bounced: Math.floor(Math.random() * 50),\n        links: this.generateLinks(),\n        recipients: this.generateRecipients(50)\n      }\n    };\n    this.campaigns.push(newCampaign);\n    return of(newCampaign).pipe(delay(1000));\n  }\n  scheduleCampaign(campaign) {\n    // Simulate API call\n    const newCampaign = {\n      ...campaign,\n      id: this.generateId(),\n      status: \"scheduled\",\n      scheduledFor: new Date(`${campaign.scheduleDate}T${campaign.scheduleTime}`).toISOString(),\n      stats: {\n        recipients: this.getRecipientsCount(campaign.recipientList, campaign.segment)\n      }\n    };\n    this.campaigns.push(newCampaign);\n    return of(newCampaign).pipe(delay(1000));\n  }\n  saveDraft(campaign) {\n    // Simulate API call\n    const newCampaign = {\n      ...campaign,\n      id: this.generateId(),\n      status: \"draft\",\n      updatedAt: new Date().toISOString()\n    };\n    this.campaigns.push(newCampaign);\n    return of(newCampaign).pipe(delay(1000));\n  }\n  generateId() {\n    return \"camp_\" + Math.random().toString(36).substring(2, 15);\n  }\n  getRecipientsCount(list, segment) {\n    // Mock recipient counts based on list and segment\n    const listCounts = {\n      all_subscribers: 5189,\n      active_users: 3241,\n      new_customers: 842,\n      newsletter: 4102\n    };\n    const segmentPercentages = {\n      high_engagement: 0.24,\n      recent_purchase: 0.11,\n      cart_abandoners: 0.06\n    };\n    let count = listCounts[list] || 0;\n    if (segment && segmentPercentages[segment]) {\n      count = Math.floor(count * segmentPercentages[segment]);\n    }\n    return count;\n  }\n  generateLinks() {\n    const links = [{\n      url: \"https://example.com/product/featured\",\n      text: \"View Featured Products\",\n      clicks: Math.floor(Math.random() * 500) + 100\n    }, {\n      url: \"https://example.com/sale/special\",\n      text: \"Special Offers\",\n      clicks: Math.floor(Math.random() * 400) + 50\n    }, {\n      url: \"https://example.com/blog/latest\",\n      text: \"Read Our Latest Blog\",\n      clicks: Math.floor(Math.random() * 200) + 50\n    }, {\n      url: \"https://example.com/unsubscribe\",\n      text: \"Unsubscribe\",\n      clicks: Math.floor(Math.random() * 30) + 5\n    }];\n    return links.map(link => ({\n      ...link,\n      uniqueClicks: Math.floor(link.clicks * 0.9) // Assume 90% of clicks are unique\n    }));\n  }\n  generateRecipients(count) {\n    const domains = [\"gmail.com\", \"yahoo.com\", \"hotmail.com\", \"outlook.com\", \"aol.com\", \"icloud.com\"];\n    const firstNames = [\"John\", \"Jane\", \"Michael\", \"Emily\", \"David\", \"Sarah\", \"Robert\", \"Lisa\", \"William\", \"Jessica\"];\n    const lastNames = [\"Smith\", \"Johnson\", \"Williams\", \"Jones\", \"Brown\", \"Davis\", \"Miller\", \"Wilson\", \"Moore\", \"Taylor\"];\n    const statuses = [\"opened\", \"clicked\", \"delivered\", \"bounced\"];\n    const locations = [\"United States\", \"United Kingdom\", \"Canada\", \"Germany\", \"France\", \"Australia\", \"India\", \"Brazil\"];\n    const devices = [\"iPhone\", \"Android\", \"Desktop Chrome\", \"Desktop Safari\", \"Desktop Firefox\", \"iPad\", \"Outlook\"];\n    const recipients = [];\n    for (let i = 0; i < count; i++) {\n      const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\n      const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\n      const domain = domains[Math.floor(Math.random() * domains.length)];\n      const status = statuses[Math.floor(Math.random() * statuses.length)];\n      const location = locations[Math.floor(Math.random() * locations.length)];\n      const device = devices[Math.floor(Math.random() * devices.length)];\n      const opens = status === \"opened\" || status === \"clicked\" ? Math.floor(Math.random() * 5) + 1 : 0;\n      const clicks = status === \"clicked\" ? Math.floor(Math.random() * 3) + 1 : 0;\n      recipients.push({\n        email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${domain}`,\n        name: `${firstName} ${lastName}`,\n        status,\n        opens,\n        clicks,\n        location,\n        device,\n        firstOpenedAt: opens > 0 ? new Date(Date.now() - Math.floor(Math.random() * 86400000)).toISOString() : null\n      });\n    }\n    return recipients;\n  }\n  static {\n    this.Éµfac = function CampaignService_Factory(t) {\n      return new (t || CampaignService)();\n    };\n  }\n  static {\n    this.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n      token: CampaignService,\n      factory: CampaignService.Éµfac,\n      providedIn: \"root\"\n    });\n  }\n}","map":{"version":3,"names":["of","delay","CampaignService","constructor","campaigns","id","name","subject","senderName","senderEmail","replyToEmail","campaignType","template","content","recipientList","segment","status","sentAt","stats","sent","delivered","opened","clicked","unsubscribed","bounced","links","url","text","clicks","uniqueClicks","recipients","generateRecipients","getCampaigns","pipe","getCampaignById","campaign","find","c","sendCampaign","newCampaign","generateId","Date","toISOString","Math","floor","random","generateLinks","push","scheduleCampaign","scheduledFor","scheduleDate","scheduleTime","getRecipientsCount","saveDraft","updatedAt","toString","substring","list","listCounts","all_subscribers","active_users","new_customers","newsletter","segmentPercentages","high_engagement","recent_purchase","cart_abandoners","count","map","link","domains","firstNames","lastNames","statuses","locations","devices","i","firstName","length","lastName","domain","location","device","opens","email","toLowerCase","firstOpenedAt","now","factory","Éµfac","providedIn"],"sources":["C:\\Users\\foulm\\Downloads\\v12\\src\\app\\services\\campaign.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\"\nimport { type Observable, of } from \"rxjs\"\nimport { delay } from \"rxjs/operators\"\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CampaignService {\n  private campaigns: any[] = [\n    {\n      id: \"camp_1234567890\",\n      name: \"Monthly Newsletter - May 2023\",\n      subject: \"Your May Newsletter: Latest Updates and Offers\",\n      senderName: \"Good Mail Team\",\n      senderEmail: \"team@goodmail.io\",\n      replyToEmail: \"support@goodmail.io\",\n      campaignType: \"regular\",\n      template: \"newsletter\",\n      content: \"<h1>May Newsletter</h1><p>Here are our latest updates...</p>\",\n      recipientList: \"all_subscribers\",\n      segment: \"\",\n      status: \"sent\",\n      sentAt: \"2023-05-15T10:30:00Z\",\n      stats: {\n        sent: 5189,\n        delivered: 5120,\n        opened: 2150,\n        clicked: 843,\n        unsubscribed: 12,\n        bounced: 69,\n        links: [\n          {\n            url: \"https://example.com/product/new\",\n            text: \"View New Products\",\n            clicks: 423,\n            uniqueClicks: 380,\n          },\n          {\n            url: \"https://example.com/sale\",\n            text: \"Shop the Sale\",\n            clicks: 312,\n            uniqueClicks: 285,\n          },\n          {\n            url: \"https://example.com/blog/tips\",\n            text: \"Read Our Latest Tips\",\n            clicks: 156,\n            uniqueClicks: 142,\n          },\n          {\n            url: \"https://example.com/unsubscribe\",\n            text: \"Unsubscribe\",\n            clicks: 36,\n            uniqueClicks: 36,\n          },\n        ],\n        recipients: this.generateRecipients(50),\n      },\n    },\n    {\n      id: \"camp_0987654321\",\n      name: \"Product Launch - New Summer Collection\",\n      subject: \"Introducing Our New Summer Collection! ðŸŒž\",\n      senderName: \"Good Mail Team\",\n      senderEmail: \"team@goodmail.io\",\n      replyToEmail: \"support@goodmail.io\",\n      campaignType: \"regular\",\n      template: \"product_announcement\",\n      content: \"<h1>Summer Collection</h1><p>Check out our new summer items...</p>\",\n      recipientList: \"all_subscribers\",\n      segment: \"\",\n      status: \"sent\",\n      sentAt: \"2023-06-01T09:00:00Z\",\n      stats: {\n        sent: 4950,\n        delivered: 4900,\n        opened: 2352,\n        clicked: 1176,\n        unsubscribed: 8,\n        bounced: 50,\n        links: [\n          {\n            url: \"https://example.com/summer-collection\",\n            text: \"Shop Summer Collection\",\n            clicks: 876,\n            uniqueClicks: 780,\n          },\n          {\n            url: \"https://example.com/sale/summer\",\n            text: \"Summer Sale Items\",\n            clicks: 342,\n            uniqueClicks: 310,\n          },\n          {\n            url: \"https://example.com/blog/summer-trends\",\n            text: \"Summer Fashion Trends\",\n            clicks: 124,\n            uniqueClicks: 110,\n          },\n          {\n            url: \"https://example.com/unsubscribe\",\n            text: \"Unsubscribe\",\n            clicks: 24,\n            uniqueClicks: 24,\n          },\n        ],\n        recipients: this.generateRecipients(50),\n      },\n    },\n  ]\n\n  constructor() {}\n\n  getCampaigns(): Observable<any[]> {\n    return of(this.campaigns).pipe(delay(500))\n  }\n\n  getCampaignById(id: string): Observable<any> {\n    const campaign = this.campaigns.find((c) => c.id === id) || this.campaigns[0]\n    return of(campaign).pipe(delay(500))\n  }\n\n  sendCampaign(campaign: any): Observable<any> {\n    // Simulate API call\n    const newCampaign = {\n      ...campaign,\n      id: this.generateId(),\n      status: \"sent\",\n      sentAt: new Date().toISOString(),\n      stats: {\n        sent: Math.floor(Math.random() * 5000) + 1000,\n        delivered: Math.floor(Math.random() * 4500) + 900,\n        opened: Math.floor(Math.random() * 2000) + 500,\n        clicked: Math.floor(Math.random() * 1000) + 100,\n        unsubscribed: Math.floor(Math.random() * 20),\n        bounced: Math.floor(Math.random() * 50),\n        links: this.generateLinks(),\n        recipients: this.generateRecipients(50),\n      },\n    }\n\n    this.campaigns.push(newCampaign)\n    return of(newCampaign).pipe(delay(1000))\n  }\n\n  scheduleCampaign(campaign: any): Observable<any> {\n    // Simulate API call\n    const newCampaign = {\n      ...campaign,\n      id: this.generateId(),\n      status: \"scheduled\",\n      scheduledFor: new Date(`${campaign.scheduleDate}T${campaign.scheduleTime}`).toISOString(),\n      stats: {\n        recipients: this.getRecipientsCount(campaign.recipientList, campaign.segment),\n      },\n    }\n\n    this.campaigns.push(newCampaign)\n    return of(newCampaign).pipe(delay(1000))\n  }\n\n  saveDraft(campaign: any): Observable<any> {\n    // Simulate API call\n    const newCampaign = {\n      ...campaign,\n      id: this.generateId(),\n      status: \"draft\",\n      updatedAt: new Date().toISOString(),\n    }\n\n    this.campaigns.push(newCampaign)\n    return of(newCampaign).pipe(delay(1000))\n  }\n\n  private generateId(): string {\n    return \"camp_\" + Math.random().toString(36).substring(2, 15)\n  }\n\n  private getRecipientsCount(list: string, segment: string): number {\n    // Mock recipient counts based on list and segment\n    const listCounts: { [key: string]: number } = {\n      all_subscribers: 5189,\n      active_users: 3241,\n      new_customers: 842,\n      newsletter: 4102,\n    }\n\n    const segmentPercentages: { [key: string]: number } = {\n      high_engagement: 0.24,\n      recent_purchase: 0.11,\n      cart_abandoners: 0.06,\n    }\n\n    let count = listCounts[list] || 0\n\n    if (segment && segmentPercentages[segment]) {\n      count = Math.floor(count * segmentPercentages[segment])\n    }\n\n    return count\n  }\n\n  private generateLinks(): any[] {\n    const links = [\n      {\n        url: \"https://example.com/product/featured\",\n        text: \"View Featured Products\",\n        clicks: Math.floor(Math.random() * 500) + 100,\n      },\n      {\n        url: \"https://example.com/sale/special\",\n        text: \"Special Offers\",\n        clicks: Math.floor(Math.random() * 400) + 50,\n      },\n      {\n        url: \"https://example.com/blog/latest\",\n        text: \"Read Our Latest Blog\",\n        clicks: Math.floor(Math.random() * 200) + 50,\n      },\n      {\n        url: \"https://example.com/unsubscribe\",\n        text: \"Unsubscribe\",\n        clicks: Math.floor(Math.random() * 30) + 5,\n      },\n    ]\n\n    return links.map((link) => ({\n      ...link,\n      uniqueClicks: Math.floor(link.clicks * 0.9), // Assume 90% of clicks are unique\n    }))\n  }\n\n  private generateRecipients(count: number): any[] {\n    const domains = [\"gmail.com\", \"yahoo.com\", \"hotmail.com\", \"outlook.com\", \"aol.com\", \"icloud.com\"]\n    const firstNames = [\"John\", \"Jane\", \"Michael\", \"Emily\", \"David\", \"Sarah\", \"Robert\", \"Lisa\", \"William\", \"Jessica\"]\n    const lastNames = [\"Smith\", \"Johnson\", \"Williams\", \"Jones\", \"Brown\", \"Davis\", \"Miller\", \"Wilson\", \"Moore\", \"Taylor\"]\n    const statuses = [\"opened\", \"clicked\", \"delivered\", \"bounced\"]\n    const locations = [\"United States\", \"United Kingdom\", \"Canada\", \"Germany\", \"France\", \"Australia\", \"India\", \"Brazil\"]\n    const devices = [\"iPhone\", \"Android\", \"Desktop Chrome\", \"Desktop Safari\", \"Desktop Firefox\", \"iPad\", \"Outlook\"]\n\n    const recipients = []\n\n    for (let i = 0; i < count; i++) {\n      const firstName = firstNames[Math.floor(Math.random() * firstNames.length)]\n      const lastName = lastNames[Math.floor(Math.random() * lastNames.length)]\n      const domain = domains[Math.floor(Math.random() * domains.length)]\n      const status = statuses[Math.floor(Math.random() * statuses.length)]\n      const location = locations[Math.floor(Math.random() * locations.length)]\n      const device = devices[Math.floor(Math.random() * devices.length)]\n      const opens = status === \"opened\" || status === \"clicked\" ? Math.floor(Math.random() * 5) + 1 : 0\n      const clicks = status === \"clicked\" ? Math.floor(Math.random() * 3) + 1 : 0\n\n      recipients.push({\n        email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${domain}`,\n        name: `${firstName} ${lastName}`,\n        status,\n        opens,\n        clicks,\n        location,\n        device,\n        firstOpenedAt: opens > 0 ? new Date(Date.now() - Math.floor(Math.random() * 86400000)).toISOString() : null,\n      })\n    }\n\n    return recipients\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}